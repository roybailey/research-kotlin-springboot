package me.roybailey.generator.code

import com.github.jknack.handlebars.Handlebars
import me.roybailey.generator.ApiSpecification
import me.roybailey.generator.ApiTableMapping
import me.roybailey.generator.ConfigurationProperties
import mu.KotlinLogging
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component
import java.io.File
import java.nio.file.Files.createDirectories
import java.nio.file.Path


@Component
class ServiceCodeGenerator {

    private val logger = KotlinLogging.logger {}

    @Autowired
    lateinit var properties: ConfigurationProperties

    @Autowired
    lateinit var apiSpecifications: List<ApiSpecification>

    val serviceTemplate = """ 
package {{PACKAGE_NAME}}

import me.roybailey.codegen.jooq.database.Tables.{{TABLE_NAME}}
import me.roybailey.codegen.jooq.database.tables.records.{{RECORD_NAME}}
import me.roybailey.codegen.jooq.database.tables.pojos.{{DOMAIN_NAME}}
import org.jooq.*
import org.jooq.impl.DSL.*
import org.springframework.stereotype.Component


@Component
class {{DOMAIN_NAME}}Service(private val dsl: DSLContext) {

    fun condition(request:Map<String,Any>) {
        val result = trueCondition()
        result
    } 

    fun getAllData(): List<{{DOMAIN_NAME}}> {
        val results = dsl
            .select()
            .from({{TABLE_NAME}})
            .fetch()
            .into({{DOMAIN_NAME}}::class.java)
        return results;
    }
}
    """.trimIndent().trim()


    fun generate(writeToFile: Boolean = true) {

        logger.info("Service Code Generation - STARTING")
        val basedir = properties.basedir
        val target = properties.target
        val basePackageName = "${properties.basePackageName}.api"
        val basePackageDirectory = "$basedir/$target/${basePackageName.replace(".", "/")}"
        val tableMappings = apiSpecifications
            .map { apiDefinition -> apiDefinition.tableMapping }
            .toList()
            .flatten()

        logger.info("basedir=$basedir")
        logger.info("target=$target")
        logger.info("basePackageName=$basePackageName")
        logger.info("basePackageDirectory=$basePackageDirectory")
        logger.info("tableMappings=$tableMappings")

        tableMappings.forEach { tableMapping: ApiTableMapping ->
            val domainLowercase = tableMapping.domain.toLowerCase()
            val domainPackageDirectory = "$basePackageDirectory/$domainLowercase"
            createDirectories(Path.of(domainPackageDirectory))

            val output = generateTableService(tableMapping, basePackageName)

            if (writeToFile) {
                val controller = File("$domainPackageDirectory/${tableMapping.domain}Service.kt")
                controller.printWriter().use { out ->
                    out.print("// !!!!! GENERATED BY ${this.javaClass.name} !!!!!\n")
                    out.print(output)
                    out.print("\n\n// !!!!! GENERATED BY ${this.javaClass.name} !!!!!\n")
                }
            }
        }

        logger.info("Service  Code Generation - FINISHED")
    }


    fun generateTableService(
        tableMapping: ApiTableMapping,
        basePackageName: String
    ): String {
        val domainLowercase = tableMapping.domain.toLowerCase()
        val domainPackageName = "$basePackageName.$domainLowercase"

        val model = mapOf(
            Pair("PACKAGE_NAME", domainPackageName),
            Pair("DOMAIN_NAME", tableMapping.domain),
            Pair("DOMAIN_BASEURL", domainLowercase),
            Pair("TABLE_NAME", tableMapping.table.toUpperCase()),
            Pair("RECORD_NAME", tableMapping.record)
        )
        val handlebars = Handlebars()
        val template = handlebars.compileInline(serviceTemplate)
        return template.apply(model)
    }
}
