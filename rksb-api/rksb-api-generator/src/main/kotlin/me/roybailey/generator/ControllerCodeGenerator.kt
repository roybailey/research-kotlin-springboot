package me.roybailey.generator

import mu.KotlinLogging
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component
import org.springframework.beans.factory.annotation.Value
import java.io.File
import java.nio.file.Files.createDirectories
import java.nio.file.Path
import javax.annotation.PostConstruct


@Component
class ControllerCodeGenerator {

    private val logger = KotlinLogging.logger {}

    @Autowired
    lateinit var properties: ConfigurationProperties

    @Autowired
    lateinit var apiDefinitions: List<ApiDefinition>

    val controllerTemplate = """ 
package {{PACKAGE_NAME}}

import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import me.roybailey.codegen.jooq.database.tables.pojos.{{DOMAIN_NAME}}


@RestController
class {{DOMAIN_NAME}}Controller(private val {{DOMAIN_VARIABLE}}Service: {{DOMAIN_NAME}}Service) {

    @GetMapping
    @RequestMapping("/{{DOMAIN_BASEURL}}")
    fun getAllData(): List<{{DOMAIN_NAME}}> {
        return {{DOMAIN_VARIABLE}}Service.getAllData();
    }
}
    """.trimIndent().trim()


    fun generate() {

        logger.info("Controller Code Generation - STARTING")
        val basedir = properties.basedir
        val target = properties.target
        val basePackageName = "${properties.basePackageName}.api"
        val basePackageDirectory = "$basedir/$target/${basePackageName.replace(".", "/")}"
        val tableMappings = apiDefinitions
            .map { apiDefinition -> apiDefinition.tableMapping }
            .toList()
            .flatten()

        logger.info("basedir=$basedir")
        logger.info("target=$target")
        logger.info("basePackageName=$basePackageName")
        logger.info("basePackageDirectory=$basePackageDirectory")
        logger.info("tableMappings=$tableMappings")

        tableMappings.forEach {
            val domainLowercase = it.domain.lowercase()
            val domainPackageName = "$basePackageName.$domainLowercase"
            val domainPackageDirectory = "$basePackageDirectory/$domainLowercase"
            createDirectories(Path.of(domainPackageDirectory))

            val controller = File("$domainPackageDirectory/${it.domain}Controller.kt")
            controller.printWriter().use { out ->
                out.println("// !!!!! GENERATED BY ${this.javaClass.name} !!!!!")
                out.println(
                    controllerTemplate
                        .replace("{{PACKAGE_NAME}}", domainPackageName)
                        .replace("{{DOMAIN_NAME}}", it.domain)
                        .replace("{{DOMAIN_BASEURL}}", domainLowercase)
                        .replace("{{DOMAIN_VARIABLE}}", domainLowercase)
                        .replace("{{TABLE_NAME}}", it.domain.uppercase())
                        .replace("{{RECORD_NAME}}", it.record)
                )
                out.println("// !!!!! GENERATED BY ${this.javaClass.name} !!!!!")
            }
        }
        logger.info("Controller  Code Generation - FINISHED")
    }
}
