package me.roybailey.generator.code

import me.roybailey.api.blueprint.ApiBlueprint
import me.roybailey.api.blueprint.ApiBlueprintProperties
import me.roybailey.generator.GeneratorProperties
import me.roybailey.generator.GeneratorResult
import mu.KotlinLogging
import org.springframework.beans.factory.annotation.Autowired
import java.io.File
import java.util.concurrent.Callable


abstract class AbstractCodeGenerator : Callable<Boolean> {

    private val logger = KotlinLogging.logger {}

    @Autowired
    lateinit var apiBlueprintProperties: ApiBlueprintProperties

    @Autowired
    lateinit var generatorProperties: GeneratorProperties

    @Autowired
    lateinit var apiBlueprints: List<ApiBlueprint>


    override fun call(): GeneratorResult = generate()

    fun generate(writeToFile: Boolean = true): GeneratorResult {

        logger.info("${this.javaClass.simpleName} - STARTING")

        val basePackageName = "${apiBlueprintProperties.codegenBasePackage}.api"
        val basePackageDirectory = "${generatorProperties.basedir}/${generatorProperties.target}/${basePackageName
            .replace(".", "/")}"

        logger.info("basedir=${generatorProperties.basedir}")
        logger.info("target=${generatorProperties.target}")
        logger.info("basePackageName=$basePackageName")
        logger.info("basePackageDirectory=$basePackageDirectory")

        val result = generateClass(writeToFile, basePackageDirectory, basePackageName)

        logger.info("${this.javaClass.simpleName} - FINISHED")
        return result
    }

    fun writeToFile(pathname: String, output: String) {
        val file = File(pathname)
        file.printWriter().use { out ->
            out.print("// !!!!! GENERATED BY ${this.javaClass.name} !!!!!\n")
            out.print(output)
            out.print("\n\n// !!!!! GENERATED BY ${this.javaClass.name} !!!!!\n")
        }
    }

    abstract fun generateClass(writeToFile: Boolean = true, basePackageDirectory: String, basePackageName: String): GeneratorResult
}
