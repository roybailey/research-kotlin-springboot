package me.roybailey.generator.code

import com.github.jknack.handlebars.Handlebars
import me.roybailey.api.blueprint.ApiBlueprint
import me.roybailey.api.blueprint.ApiBlueprintProperties
import me.roybailey.api.blueprint.ApiMapping
import me.roybailey.api.blueprint.ApiTableMapping
import me.roybailey.generator.GeneratorProperties
import mu.KotlinLogging
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component
import java.io.File
import java.nio.file.Files.createDirectories
import java.nio.file.Path
import java.util.concurrent.Callable


@Component
class ControllerCodeGenerator : Callable<Boolean> {

    private val logger = KotlinLogging.logger {}

    @Autowired
    lateinit var apiBlueprintProperties: ApiBlueprintProperties

    @Autowired
    lateinit var generatorProperties: GeneratorProperties

    @Autowired
    lateinit var apiBlueprints: List<ApiBlueprint>

    val controllerTemplate = """ 
package {{PACKAGE_NAME}}

import javax.servlet.http.HttpServletRequest
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import me.roybailey.api.common.BaseController
import me.roybailey.codegen.jooq.database.tables.pojos.{{DOMAIN_NAME}}


@RestController
class {{apiMapping.namespace}}Controller(private val {{DOMAIN_VARIABLE}}Service: {{DOMAIN_NAME}}Service) : BaseController() {

    @GetMapping
    @RequestMapping("{{apiMapping.apiPath}}")
    fun getAllData(request:HttpServletRequest): List<{{DOMAIN_NAME}}> {
        return {{DOMAIN_VARIABLE}}Service.getAllData(request.parameterMap);
    }
}
    """.trimIndent().trim()


    override fun call(): Boolean = generate()

    fun generate(writeToFile: Boolean = true): Boolean {

        logger.info("Controller Code Generation - STARTING")
        val basedir = generatorProperties.basedir
        val target = generatorProperties.target
        val basePackageName = "${apiBlueprintProperties.codegenBasePackage}.api"
        val basePackageDirectory = "$basedir/$target/${basePackageName.replace(".", "/")}"

        logger.info("basedir=$basedir")
        logger.info("target=$target")
        logger.info("basePackageName=$basePackageName")
        logger.info("basePackageDirectory=$basePackageDirectory")

        apiBlueprints.forEach { blueprint ->
            logger.info("Processing blueprint=$blueprint")
            blueprint.apiMapping!!.forEach { apiMapping ->
                logger.info("Processing apiMapping=$apiMapping")
                val tableMapping = blueprint.tableMapping.find { it.id == apiMapping.tableMappingId }!!
                val domainLowercase = apiMapping.namespace.toLowerCase()
                val domainPackageName = "$basePackageName.$domainLowercase"
                val domainPackageDirectory = "$basePackageDirectory/$domainLowercase"
                createDirectories(Path.of(domainPackageDirectory))

                val output = generateTableController(apiMapping, tableMapping, basePackageName)

                val controller = File("$domainPackageDirectory/${tableMapping.domain}Controller.kt")
                controller.printWriter().use { out ->
                    out.print("// !!!!! GENERATED BY ${this.javaClass.name} !!!!!\n")
                    out.print(output)
                    out.print("\n\n// !!!!! GENERATED BY ${this.javaClass.name} !!!!!\n")
                }
            }
        }

        logger.info("Controller  Code Generation - FINISHED")
        return true
    }


    fun generateTableController(
        apiMapping: ApiMapping,
        tableMapping: ApiTableMapping,
        basePackageName: String
    ): String {
        val domainLowercase = tableMapping.domain.toLowerCase()
        val domainPackageName = "$basePackageName.$domainLowercase"

        val model = mapOf(
            Pair("apiMapping", apiMapping),
            Pair("tableMapping", tableMapping),
            Pair("PACKAGE_NAME", domainPackageName),
            Pair("DOMAIN_NAME", tableMapping.domain),
            Pair("DOMAIN_VARIABLE", tableMapping.domain.replaceFirstChar { it.toLowerCase() }),
            Pair("DOMAIN_BASEURL", domainLowercase),
            Pair("TABLE_NAME", tableMapping.table.toUpperCase()),
            Pair("RECORD_NAME", tableMapping.record),
        )
        val handlebars = Handlebars()
        val template = handlebars.compileInline(controllerTemplate)
        return template.apply(model)
    }

}
