package me.roybailey.api.generator.service

import me.roybailey.api.blueprint.BlueprintCollection
import me.roybailey.api.blueprint.BlueprintProperties
import me.roybailey.api.generator.configuration.GeneratorProperties
import me.roybailey.api.generator.configuration.GeneratorResult
import me.roybailey.api.generator.service.code.ControllerCodeGenerator
import me.roybailey.api.generator.service.code.ModelCodeGenerator
import me.roybailey.api.generator.service.code.ServiceCodeGenerator
import mu.KotlinLogging
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component
import java.io.File
import java.nio.file.Files
import java.nio.file.Path
import java.util.concurrent.Callable

@Component
class CodeGenerator : Callable<GeneratorResult> {

    private val logger = KotlinLogging.logger {}

    @Autowired
    lateinit var blueprintProperties: BlueprintProperties

    @Autowired
    lateinit var blueprintCollection: BlueprintCollection

    @Autowired
    lateinit var generatorProperties: GeneratorProperties

    @Autowired
    lateinit var modelCodeGenerator: ModelCodeGenerator

    @Autowired
    lateinit var serviceCodeGenerator: ServiceCodeGenerator

    @Autowired
    lateinit var controllerCodeGenerator: ControllerCodeGenerator


    override fun call(): GeneratorResult {
        logger.info("Code Generation - STARTING")

        val basedir = generatorProperties.basedir
        val target = generatorProperties.target
        val baseSourceFolder = "$basedir/$target/"
        val basePackageFolder = "$baseSourceFolder/${blueprintCollection.packageName.replace(".","/")}/"

        logger.info("basedir=$basedir")
        logger.info("target=$target")
        logger.info("baseSourceFolder=$baseSourceFolder")
        logger.info("basePackageFolder=$basePackageFolder")

        val generators = listOf(modelCodeGenerator, serviceCodeGenerator, controllerCodeGenerator)
        val generatorResults = mutableListOf<GeneratorResult>()
        generators.forEach { generator ->
            generatorResults.add(generator.call())
        }

        File("$basePackageFolder.api").deleteRecursively()
        File("$basePackageFolder.model").deleteRecursively()
        File("$basePackageFolder.service").deleteRecursively()
        generatorResults.forEach { generatorResult ->
            generatorResult.content.forEach { generatorFileContent ->
                val filePath = "$baseSourceFolder/${generatorFileContent.filename}".replace("//","/")
                writeToFile(generatorResult.name, filePath, generatorFileContent.content)
            }
        }

        logger.info("Code Generation - FINISHED")
        return GeneratorResult(this.javaClass.simpleName, generatorResults
            .map { result -> result.content }
            .toList()
            .flatten())
    }


    fun writeToFile(generatorName: String, filePath: String, output: String) {
        println(filePath)
        val path = Path.of(filePath)
        Files.createDirectories(path.parent)
        System.out.use { out ->
            out.print("// !!!!! GENERATED BY $generatorName !!!!!\n")
            out.print(output)
            out.print("\n\n// !!!!! GENERATED BY $generatorName !!!!!\n")
        }
        path.toFile().printWriter().use { out ->
            out.print("// !!!!! GENERATED BY $generatorName !!!!!\n")
            out.print(output)
            out.print("\n\n// !!!!! GENERATED BY $generatorName !!!!!\n")
        }
    }
}
